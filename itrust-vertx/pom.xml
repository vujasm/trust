<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<artifactId>itrust-vertx</artifactId>
   		
	<name>itrust-vertx</name>
	<packaging>jar</packaging>
	<description>This is a Trust Vertx Server</description>
	<developers>
		<developer>
			
			<name>Marko Vujasinovic</name>
			<email>m.vujasinovic-{AT}-innova-eu.net</email>
			<organization>INNOVA S.p.A</organization>
			<organizationUrl>www.innova-eu.net</organizationUrl>
		</developer>
	</developers>
	<organization>
		<name>INNOVA S.p.A</name>
		<url>www.innova-eu.net</url>
	</organization>
	
	<parent>
        <artifactId>itrust</artifactId>
        <groupId>com.innova.compose</groupId>
        <version>0.0.1</version>
       <relativePath>..</relativePath>
    </parent>
    
    <properties>
   			 <license.licenseResolver>${project.baseUri}../license</license.licenseResolver>
   	 	
   	 	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Set pullInDeps to true if you want any modules specified in the 'includes' and 'deploys' fields
    in your mod.json to be automatically pulled in during packaging and added inside your module. Doing this means your
    module won't download and install those dependencies at run-time when they're first requested. -->
    <vertx.pullInDeps>false</vertx.pullInDeps>

    <!-- Set createFatJar to true if you want to create a fat executable jar which contains the Vert.x binaries
    along with the module so it can be run with java -jar <jarname> -->
    <vertx.createFatJar>false</vertx.createFatJar>

    <!--Vertx module name-->
    <module.name>${project.groupId}~${project.artifactId}~${project.version}</module.name>

    <!-- The directory where the module will be assembled - you can override this on the command line
    with -Dmods.directory=mydir -->
    <mods.directory>target/mods</mods.directory>

    <!--Dependency versions-->
    <vertx.version>2.0.2-final</vertx.version>
    <vertx.testtools.version>2.0.2-final</vertx.testtools.version>
    <junit.version>4.11</junit.version>

    <!--Plugin versions-->
    <maven.resources.plugin.version>2.6</maven.resources.plugin.version>
    <maven.clean.plugin.version>2.5</maven.clean.plugin.version>
    <maven.vertx.plugin.version>2.0.1-final</maven.vertx.plugin.version>
    <maven.surefire.plugin.version>2.14</maven.surefire.plugin.version>
    <maven.failsafe.plugin.version>2.14</maven.failsafe.plugin.version>
    <maven.surefire.report.plugin.version>2.14</maven.surefire.report.plugin.version>
    <maven.javadoc.plugin.version>2.9</maven.javadoc.plugin.version>
    <maven.dependency.plugin.version>2.7</maven.dependency.plugin.version>
	</properties>
    
    
    
	
	<dependencies>
		<dependency>
			<groupId>com.innova.compose</groupId>
			<artifactId>itrust-service</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.innova.compose</groupId>
			<artifactId>itrust-model</artifactId>
			<version>0.0.1</version>
		</dependency>
		 <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.0</version>
        </dependency>
        
         <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>14.0.1</version>
        </dependency>
        
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>3.0</version>
        </dependency>
     
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-assistedinject</artifactId>
            <version>3.0</version>
        </dependency>

 <!--Vertx provided dependencies-->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <version>${vertx.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-platform</artifactId>
      <version>${vertx.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>hazelcast</artifactId>
      <version>2.6</version>
      <scope>provided</scope>
    </dependency>
    <!--Test dependencies-->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>testtools</artifactId>
      <version>${vertx.testtools.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Add any other dependencies that you want packaged into your module (in the lib dir) here
    as 'compile' dependencies. Here is an example
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>1.3</version>
      <scope>compile</scope>
    </dependency>
    -->

<!--       <dependency> -->
<!--           <groupId>io.vertx</groupId> -->
<!--           <artifactId>mod-mongo-persistor</artifactId> -->
<!--           <version>2.1.0-SNAPSHOT</version> -->
<!--           <scope>compile</scope> -->
<!--       </dependency> -->

<!--       <dependency> -->
<!--           <groupId>io.vertx</groupId> -->
<!--           <artifactId>mod-rxjava</artifactId> -->
<!--           <version>1.0.0-beta2-SNAPSHOT</version> -->
<!--           <scope>compile</scope> -->
<!--       </dependency> -->

	</dependencies>
	
	  <build>
    <plugins>

      <!-- The vert.x Maven plugin -->
      <plugin>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-maven-plugin</artifactId>
        <version>${maven.vertx.plugin.version}</version>
        <!--
        You can specify extra config to the plugin as required here
        <configuration>
           <configFile>/path/to/MyVerticle.conf</configFile>
           <instances>1</instances>
           <classpath>src/main/resources/:src/test/resources/:target/classes/:target/test-classes/</classpath>
        </configuration>
        -->
        <executions>
          <execution>
            <id>PullInDeps</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>pullInDeps</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Other plugins required by the build -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven.resources.plugin.version}</version>
        <executions>
          <execution>
            <id>copy-mod-to-target</id>
            <phase>process-classes</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <overwrite>true</overwrite>
              <outputDirectory>${mods.directory}/${module.name}</outputDirectory>
              <resources>
                <resource>
                  <directory>target/classes</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven.dependency.plugin.version}</version>
        <executions>
          <execution>
            <id>copy-mod-dependencies-to-target</id>
            <phase>process-classes</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${mods.directory}/${module.name}/lib</outputDirectory>
              <includeScope>runtime</includeScope>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
        <configuration>
          <includes>
            <include>**/unit/*Test*.java</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven.failsafe.plugin.version}</version>
        <configuration>
          <systemProperties>
            <property>
              <name>vertx.mods</name>
              <value>${mods.directory}</value>
            </property>
          </systemProperties>
          <includes>
            <include>**/integration/**</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>${maven.surefire.report.plugin.version}</version>
        <executions>
          <execution>
            <id>generate-test-report</id>
            <phase>test</phase>
            <goals>
              <goal>report-only</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-integration-test-report</id>
            <phase>integration-test</phase>
            <goals>
              <goal>failsafe-report-only</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/mod.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <id>assemble</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>